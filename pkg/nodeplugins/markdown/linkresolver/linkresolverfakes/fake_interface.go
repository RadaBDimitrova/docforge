// SPDX-FileCopyrightText: 2023 SAP SE or an SAP affiliate company and Gardener contributors
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by counterfeiter. DO NOT EDIT.
package linkresolverfakes

import (
	"sync"

	"github.com/gardener/docforge/pkg/manifest"
	"github.com/gardener/docforge/pkg/nodeplugins/markdown/linkresolver"
)

type FakeInterface struct {
	ResolveResourceLinkStub        func(string, *manifest.Node, string) (string, error)
	resolveResourceLinkMutex       sync.RWMutex
	resolveResourceLinkArgsForCall []struct {
		arg1 string
		arg2 *manifest.Node
		arg3 string
	}
	resolveResourceLinkReturns struct {
		result1 string
		result2 error
	}
	resolveResourceLinkReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeInterface) ResolveResourceLink(arg1 string, arg2 *manifest.Node, arg3 string) (string, error) {
	fake.resolveResourceLinkMutex.Lock()
	ret, specificReturn := fake.resolveResourceLinkReturnsOnCall[len(fake.resolveResourceLinkArgsForCall)]
	fake.resolveResourceLinkArgsForCall = append(fake.resolveResourceLinkArgsForCall, struct {
		arg1 string
		arg2 *manifest.Node
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.ResolveResourceLinkStub
	fakeReturns := fake.resolveResourceLinkReturns
	fake.recordInvocation("ResolveResourceLink", []interface{}{arg1, arg2, arg3})
	fake.resolveResourceLinkMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeInterface) ResolveResourceLinkCallCount() int {
	fake.resolveResourceLinkMutex.RLock()
	defer fake.resolveResourceLinkMutex.RUnlock()
	return len(fake.resolveResourceLinkArgsForCall)
}

func (fake *FakeInterface) ResolveResourceLinkCalls(stub func(string, *manifest.Node, string) (string, error)) {
	fake.resolveResourceLinkMutex.Lock()
	defer fake.resolveResourceLinkMutex.Unlock()
	fake.ResolveResourceLinkStub = stub
}

func (fake *FakeInterface) ResolveResourceLinkArgsForCall(i int) (string, *manifest.Node, string) {
	fake.resolveResourceLinkMutex.RLock()
	defer fake.resolveResourceLinkMutex.RUnlock()
	argsForCall := fake.resolveResourceLinkArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeInterface) ResolveResourceLinkReturns(result1 string, result2 error) {
	fake.resolveResourceLinkMutex.Lock()
	defer fake.resolveResourceLinkMutex.Unlock()
	fake.ResolveResourceLinkStub = nil
	fake.resolveResourceLinkReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeInterface) ResolveResourceLinkReturnsOnCall(i int, result1 string, result2 error) {
	fake.resolveResourceLinkMutex.Lock()
	defer fake.resolveResourceLinkMutex.Unlock()
	fake.ResolveResourceLinkStub = nil
	if fake.resolveResourceLinkReturnsOnCall == nil {
		fake.resolveResourceLinkReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.resolveResourceLinkReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeInterface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.resolveResourceLinkMutex.RLock()
	defer fake.resolveResourceLinkMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeInterface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ linkresolver.Interface = new(FakeInterface)
