// SPDX-FileCopyrightText: 2023 SAP SE or an SAP affiliate company and Gardener contributors
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by counterfeiter. DO NOT EDIT.
package linkvalidatorfakes

import (
	"sync"

	"github.com/gardener/docforge/pkg/nodeplugins/markdown/linkvalidator"
)

type FakeInterface struct {
	ValidateLinkStub        func(string, string) bool
	validateLinkMutex       sync.RWMutex
	validateLinkArgsForCall []struct {
		arg1 string
		arg2 string
	}
	validateLinkReturns struct {
		result1 bool
	}
	validateLinkReturnsOnCall map[int]struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeInterface) ValidateLink(arg1 string, arg2 string) bool {
	fake.validateLinkMutex.Lock()
	ret, specificReturn := fake.validateLinkReturnsOnCall[len(fake.validateLinkArgsForCall)]
	fake.validateLinkArgsForCall = append(fake.validateLinkArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.ValidateLinkStub
	fakeReturns := fake.validateLinkReturns
	fake.recordInvocation("ValidateLink", []interface{}{arg1, arg2})
	fake.validateLinkMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeInterface) ValidateLinkCallCount() int {
	fake.validateLinkMutex.RLock()
	defer fake.validateLinkMutex.RUnlock()
	return len(fake.validateLinkArgsForCall)
}

func (fake *FakeInterface) ValidateLinkCalls(stub func(string, string) bool) {
	fake.validateLinkMutex.Lock()
	defer fake.validateLinkMutex.Unlock()
	fake.ValidateLinkStub = stub
}

func (fake *FakeInterface) ValidateLinkArgsForCall(i int) (string, string) {
	fake.validateLinkMutex.RLock()
	defer fake.validateLinkMutex.RUnlock()
	argsForCall := fake.validateLinkArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeInterface) ValidateLinkReturns(result1 bool) {
	fake.validateLinkMutex.Lock()
	defer fake.validateLinkMutex.Unlock()
	fake.ValidateLinkStub = nil
	fake.validateLinkReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeInterface) ValidateLinkReturnsOnCall(i int, result1 bool) {
	fake.validateLinkMutex.Lock()
	defer fake.validateLinkMutex.Unlock()
	fake.ValidateLinkStub = nil
	if fake.validateLinkReturnsOnCall == nil {
		fake.validateLinkReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.validateLinkReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeInterface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.validateLinkMutex.RLock()
	defer fake.validateLinkMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeInterface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ linkvalidator.Interface = new(FakeInterface)
