// SPDX-FileCopyrightText: 2023 SAP SE or an SAP affiliate company and Gardener contributors
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by counterfeiter. DO NOT EDIT.
package frontmatterfakes

import (
	"sync"

	"github.com/gardener/docforge/pkg/nodeplugins/markdown/document/frontmatter"
)

type FakeNodeMeta struct {
	MetaStub        func() map[string]interface{}
	metaMutex       sync.RWMutex
	metaArgsForCall []struct {
	}
	metaReturns struct {
		result1 map[string]interface{}
	}
	metaReturnsOnCall map[int]struct {
		result1 map[string]interface{}
	}
	SetMetaStub        func(map[string]interface{})
	setMetaMutex       sync.RWMutex
	setMetaArgsForCall []struct {
		arg1 map[string]interface{}
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeNodeMeta) Meta() map[string]interface{} {
	fake.metaMutex.Lock()
	ret, specificReturn := fake.metaReturnsOnCall[len(fake.metaArgsForCall)]
	fake.metaArgsForCall = append(fake.metaArgsForCall, struct {
	}{})
	stub := fake.MetaStub
	fakeReturns := fake.metaReturns
	fake.recordInvocation("Meta", []interface{}{})
	fake.metaMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeNodeMeta) MetaCallCount() int {
	fake.metaMutex.RLock()
	defer fake.metaMutex.RUnlock()
	return len(fake.metaArgsForCall)
}

func (fake *FakeNodeMeta) MetaCalls(stub func() map[string]interface{}) {
	fake.metaMutex.Lock()
	defer fake.metaMutex.Unlock()
	fake.MetaStub = stub
}

func (fake *FakeNodeMeta) MetaReturns(result1 map[string]interface{}) {
	fake.metaMutex.Lock()
	defer fake.metaMutex.Unlock()
	fake.MetaStub = nil
	fake.metaReturns = struct {
		result1 map[string]interface{}
	}{result1}
}

func (fake *FakeNodeMeta) MetaReturnsOnCall(i int, result1 map[string]interface{}) {
	fake.metaMutex.Lock()
	defer fake.metaMutex.Unlock()
	fake.MetaStub = nil
	if fake.metaReturnsOnCall == nil {
		fake.metaReturnsOnCall = make(map[int]struct {
			result1 map[string]interface{}
		})
	}
	fake.metaReturnsOnCall[i] = struct {
		result1 map[string]interface{}
	}{result1}
}

func (fake *FakeNodeMeta) SetMeta(arg1 map[string]interface{}) {
	fake.setMetaMutex.Lock()
	fake.setMetaArgsForCall = append(fake.setMetaArgsForCall, struct {
		arg1 map[string]interface{}
	}{arg1})
	stub := fake.SetMetaStub
	fake.recordInvocation("SetMeta", []interface{}{arg1})
	fake.setMetaMutex.Unlock()
	if stub != nil {
		fake.SetMetaStub(arg1)
	}
}

func (fake *FakeNodeMeta) SetMetaCallCount() int {
	fake.setMetaMutex.RLock()
	defer fake.setMetaMutex.RUnlock()
	return len(fake.setMetaArgsForCall)
}

func (fake *FakeNodeMeta) SetMetaCalls(stub func(map[string]interface{})) {
	fake.setMetaMutex.Lock()
	defer fake.setMetaMutex.Unlock()
	fake.SetMetaStub = stub
}

func (fake *FakeNodeMeta) SetMetaArgsForCall(i int) map[string]interface{} {
	fake.setMetaMutex.RLock()
	defer fake.setMetaMutex.RUnlock()
	argsForCall := fake.setMetaArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeNodeMeta) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.metaMutex.RLock()
	defer fake.metaMutex.RUnlock()
	fake.setMetaMutex.RLock()
	defer fake.setMetaMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeNodeMeta) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ frontmatter.NodeMeta = new(FakeNodeMeta)
