#!/usr/bin/env bash

# SPDX-FileCopyrightText: 2021 SAP SE or an SAP affiliate company and Gardener contributors
#
# SPDX-License-Identifier: Apache-2.0

set -e

# For the integration-test step the following environment variables are used:
# GIT_OAUTH_TOKEN - used for fetch the content from Github

getGitHubToken() {
  # Check if gardener-ci is available (in local setup)
  command -v gardener-ci >/dev/null && gardenci="true" || gardenci=""
  if [[ $gardenci == "true" ]]; then
    # Get a (round-robin) random technical GitHub user credentials
    technicalUser=$(gardener-ci config model_element --cfg-type github --cfg-name "${1}" --key credentials | sed -e "s/^GithubCredentials //" -e "s/'/\"/g")
    if [[ -n "${technicalUser}" ]]; then
      # get auth token and strip lead/trail quotes
      authToken="$(jq -r '.authToken' <<< "$technicalUser")"
      echo "${authToken}"
    fi
  fi
}

removeUntestedKeysFromMetadata() {
    metadataFiles="$(find "${1}" -type f)"
    for file in ${metadataFiles}; do 
      content=$(jq 'del(.. | .shaalias?, .weburl?, .path?, .lastmod?, .publishdate?)' "${file}")
      echo "$content" > "${file}"
    done
}

diffDirs() {
  if [[ $(uname) == 'Darwin' ]] || [[ $(uname) == *"Linux"* ]]; then
    diff -r "${1}" "${2}"
  else
    fc "${1}" "${2}"
  fi
    echo "  Passed"
}

testGeneratedTrees() {
  echo "Testing generated tree" >&2
  diffDirs "${1}" "${2}"

#   echo "Testing generated metadata" >&2
#   echo "Removing contributors file" >&2
#   if [[ -f "${3}/contributors.json" ]]; then
#     rm "${3}/contributors.json"
#   fi
#   if [[ -f "${4}/contributors.json" ]]; then
#     rm "${4}/contributors.json"
#   fi
#   diffDirs "${3}" "${4}"
}

if [[ $(uname) == 'Darwin' ]]; then
  READLINK_BIN="greadlink"
else
  READLINK_BIN="readlink"
fi

docforge_repo_path="$(${READLINK_BIN} -f "$(dirname "${0}")/..")"
int_test_dir="${docforge_repo_path}/integration-test"
int_test_expected_tree_dir="${int_test_dir}/expected-tree"
int_test_expected_metadata_dir="${int_test_dir}/expected-metadata"
int_test_output_tree_dir="${int_test_dir}/generated-tree"
# int_test_output_metadata_dir="${int_test_dir}/generated-metadata"

rm -rf "${int_test_output_tree_dir}"
# rm -rf "${int_test_output_metadata_dir}"

# build docforge
echo "Building docforge"
LOCAL_BUILD=1 "${docforge_repo_path}/.ci/build" >/dev/null 2>&1
docforge_bin="${docforge_repo_path}/bin/docforge"

echo "Docforge version: $(${docforge_bin} version 2>/dev/null)"

GIT_OAUTH_TOKEN="${GITHUB_OAUTH_TOKEN:-$(getGitHubToken github_com)}"
test "$GIT_OAUTH_TOKEN" #fail fast

int_test_config_file="${int_test_dir}/config"
echo "
hugo: true
manifest: https://github.com/gardener/docforge/blob/master/integration-test/manifest.yaml
destination: ${int_test_output_tree_dir}
content-files-formats:
- ".md"
- ".html"
- ".png"
resourceMappings:
  'https://github.com/gardener/docforge': ${docforge_repo_path}
markdown-enabled: true
" > "$int_test_config_file"
trap cleanup EXIT ERR INT TERM
function cleanup {
  echo "Deleting config file"
  rm -f "$int_test_config_file"
}

# Run docforge command with Git handler
echo
echo "Run ${docforge_bin}"
TOKEN="$GIT_OAUTH_TOKEN" DOCFORGE_CONFIG="$int_test_config_file" ${docforge_bin} --github-oauth-env-map "github.com=TOKEN"

#Remove untested metadata keys
removeUntestedKeysFromMetadata "${int_test_expected_metadata_dir}"
# removeUntestedKeysFromMetadata "${int_test_output_metadata_dir}"

echo "Testing Git Handler"
testGeneratedTrees "${int_test_expected_tree_dir}" "${int_test_output_tree_dir}" "${int_test_expected_metadata_dir}" #"${int_test_output_metadata_dir}"
